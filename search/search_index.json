{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"RINGMesh has now been industrialized by Geode-solutions with the OpenGeode platform. The legacy code is still available but the RING team supports, uses and contributes to OpenGeode . RINGMesh is a C++ open-source platform for manipulating meshes of geological models. RINGMesh is neither a geomodeler nor a mesh generation tool, but it can be used to develop geomodeling applications, such as meshing and numerical simulation tools. Features Efficient data structure to handle geological models Validity checks of geometric, geological and topological consistency. Meshes representing the geometry of geological model entities can be extented using your own data structure Complete and user-friendly API to use meshes in physical simulators Lightweight geological model viewer Utilities to convert geological models into another file format More details available in the features section. Download Latest Release See the download section for other versions and pre-compiled packages. The SEG/EAGE Overthrust model. News Date Message Feb 22, 2018 Presentation of RINGMesh at the 4th meeting of the European 3D GeoModelling Community in Orl\u00e9ans. Nov 20, 2017 New RINGMesh website ! Contact Please, use the GitHub issue tracker to ask any questions or report bugs. See the About page for additional information on our team. They are already using it!","title":"_Home"},{"location":"#features","text":"Efficient data structure to handle geological models Validity checks of geometric, geological and topological consistency. Meshes representing the geometry of geological model entities can be extented using your own data structure Complete and user-friendly API to use meshes in physical simulators Lightweight geological model viewer Utilities to convert geological models into another file format More details available in the features section.","title":"Features"},{"location":"#download","text":"Latest Release See the download section for other versions and pre-compiled packages. The SEG/EAGE Overthrust model.","title":"Download"},{"location":"#news","text":"Date Message Feb 22, 2018 Presentation of RINGMesh at the 4th meeting of the European 3D GeoModelling Community in Orl\u00e9ans. Nov 20, 2017 New RINGMesh website !","title":"News"},{"location":"#contact","text":"Please, use the GitHub issue tracker to ask any questions or report bugs. See the About page for additional information on our team.","title":"Contact"},{"location":"#they-are-already-using-it","text":"","title":"They are already using it!"},{"location":"about/","text":"About RINGMesh Developers Current Developers Pierre Anquez Fran\u00e7ois Bonneau Arnaud Botella Benjamin Chauvin Antoine Mazuyer Margaux Raguenel Other contributors Jeanne Pellerin was part of the project between 2014 - 2016 when she was at Weierstrass Institute - Total. Publications 2018 Chauvin et al., Validating novel boundary conditions for three-dimensional mechanics-based restoration: An extensional sandbox model example , AAPG Bulletin , v. 102, no. 2, p. 245-266, doi: 10.1306/0504171620817154 . 2017 Pellerin et al., RINGMesh: A programming library for developing mesh-based geomodeling applications. , Computers & Geosciences , v. 104, p. 93-100, doi: 10.1016/j.cageo.2017.03.005 . Licence RINGMesh is licensed under the 3-clauses BSD License (also called \"Revised BSD License\", \"New BSD License\", or \"Modified BSD License\") Copyright (c) 2012-2017, Association Scientifique pour la Geologie et ses Applications (ASGA). All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. * Neither the name of ASGA nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL ASGA BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. http://www.ring-team.org RING Project Ecole Nationale Superieure de Geologie - GeoRessources 2 Rue du Doyen Marcel Roubault - TSA 70605 54518 VANDOEUVRE-LES-NANCY FRANCE How to cite RINGMesh @article{Pellerin2017, title={RINGMesh: A programming library for developing mesh-based geomodeling applications}, author={Pellerin, Jeanne and Botella, Arnaud and Bonneau, Fran{\\c{c}}ois and Mazuyer, Antoine and Chauvin, Benjamin and L{\\'e}vy, Bruno and Caumon, Guillaume}, journal={Computers \\& Geosciences}, volume={104}, pages={93--100}, year={2017}, publisher={Elsevier}, doi={10.1016/j.cageo.2017.03.005}, url={https://ringmesh.ring-team.org} } About the website This website has been built using MkDocs and a modified Bootswatch theme of the Bootstrap framework.","title":"About"},{"location":"about/#about-ringmesh","text":"","title":"About RINGMesh"},{"location":"about/#developers","text":"","title":"Developers"},{"location":"about/#current-developers","text":"Pierre Anquez Fran\u00e7ois Bonneau Arnaud Botella Benjamin Chauvin Antoine Mazuyer Margaux Raguenel","title":"Current Developers"},{"location":"about/#other-contributors","text":"Jeanne Pellerin was part of the project between 2014 - 2016 when she was at Weierstrass Institute - Total.","title":"Other contributors"},{"location":"about/#publications","text":"","title":"Publications"},{"location":"about/#2018","text":"Chauvin et al., Validating novel boundary conditions for three-dimensional mechanics-based restoration: An extensional sandbox model example , AAPG Bulletin , v. 102, no. 2, p. 245-266, doi: 10.1306/0504171620817154 .","title":"2018"},{"location":"about/#2017","text":"Pellerin et al., RINGMesh: A programming library for developing mesh-based geomodeling applications. , Computers & Geosciences , v. 104, p. 93-100, doi: 10.1016/j.cageo.2017.03.005 .","title":"2017"},{"location":"about/#licence","text":"RINGMesh is licensed under the 3-clauses BSD License (also called \"Revised BSD License\", \"New BSD License\", or \"Modified BSD License\") Copyright (c) 2012-2017, Association Scientifique pour la Geologie et ses Applications (ASGA). All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. * Neither the name of ASGA nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL ASGA BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. http://www.ring-team.org RING Project Ecole Nationale Superieure de Geologie - GeoRessources 2 Rue du Doyen Marcel Roubault - TSA 70605 54518 VANDOEUVRE-LES-NANCY FRANCE","title":"Licence"},{"location":"about/#how-to-cite-ringmesh","text":"@article{Pellerin2017, title={RINGMesh: A programming library for developing mesh-based geomodeling applications}, author={Pellerin, Jeanne and Botella, Arnaud and Bonneau, Fran{\\c{c}}ois and Mazuyer, Antoine and Chauvin, Benjamin and L{\\'e}vy, Bruno and Caumon, Guillaume}, journal={Computers \\& Geosciences}, volume={104}, pages={93--100}, year={2017}, publisher={Elsevier}, doi={10.1016/j.cageo.2017.03.005}, url={https://ringmesh.ring-team.org} }","title":"How to cite RINGMesh"},{"location":"about/#about-the-website","text":"This website has been built using MkDocs and a modified Bootswatch theme of the Bootstrap framework.","title":"About the website"},{"location":"download/","text":"Download RINGMesh RINGMesh is available under two different packages: Source code packages. Please follow configuration and compilation procedure . Pre-compiled packages. If your system is compatible you can extract files from the archive and use RINGMesh directly . Download the source code Unreleased Developments Living archive (current state of project) Latest Developments Clone the source code from GitHub The project is hosted on the GitHub platform: https://github.com/ringmesh/RINGMesh . You can clone RINGMesh using: git clone https://github.com/ringmesh/RINGMesh/ To clone RINGMesh you need Git (https://git-scm.com/). Make sure that Git binary directory is in your computer path (environment variable). Under Windows, after installing Git you should have in your path environment variable: C:\\Program Files\\Git\\cmd. Warning: TortoiseGit (https://tortoisegit.org/) does not install Git. Latest Release Latest Release Other Releases Find all RINGMesh Release on GitHub . Download pre-compiled packages Unreleased Developments Packages are built with graphics and utilities (see configuration options ). Linux MacOS (in progress) Windows (VS2013) Windows (VS2015)","title":"Download"},{"location":"download/#download-ringmesh","text":"RINGMesh is available under two different packages: Source code packages. Please follow configuration and compilation procedure . Pre-compiled packages. If your system is compatible you can extract files from the archive and use RINGMesh directly .","title":"Download RINGMesh"},{"location":"download/#download-the-source-code","text":"","title":"Download the source code"},{"location":"download/#unreleased-developments","text":"","title":"Unreleased Developments"},{"location":"download/#living-archive-current-state-of-project","text":"Latest Developments","title":"Living archive (current state of project)"},{"location":"download/#clone-the-source-code-from-github","text":"The project is hosted on the GitHub platform: https://github.com/ringmesh/RINGMesh . You can clone RINGMesh using: git clone https://github.com/ringmesh/RINGMesh/ To clone RINGMesh you need Git (https://git-scm.com/). Make sure that Git binary directory is in your computer path (environment variable). Under Windows, after installing Git you should have in your path environment variable: C:\\Program Files\\Git\\cmd. Warning: TortoiseGit (https://tortoisegit.org/) does not install Git.","title":"Clone the source code from GitHub"},{"location":"download/#latest-release","text":"Latest Release","title":"Latest Release"},{"location":"download/#other-releases","text":"Find all RINGMesh Release on GitHub .","title":"Other Releases"},{"location":"download/#download-pre-compiled-packages","text":"","title":"Download pre-compiled packages"},{"location":"download/#unreleased-developments_1","text":"Packages are built with graphics and utilities (see configuration options ). Linux MacOS (in progress) Windows (VS2013) Windows (VS2015)","title":"Unreleased Developments"},{"location":"gallery/","text":"Under construction","title":"Gallery"},{"location":"gallery/#under-construction","text":"","title":"Under construction"},{"location":"glossary/","text":"Glossary This page gives definitions of the words commonly used in the RINGMesh project. Base objects Point - A position in space: (x,y) in 2D or (x,y,z) in 3D. Segment - Part of a line bounded by two distinct points. Polygon - Part of a plane bounded by a finite number of non-intersecting segments closing in a loop. Polyhedron - Part of a space bounded by a finite number of non-intersecting polygons defining an interior and an exterior. N-simplex - The convex-hull of N+1 points Point: 0-simplex Segment: 1-simplex Triangle: 2-simplex Tetrahedron: 3-simplex Elements of a mesh Mesh cell - A polyhedron of a volumetric mesh. Mesh polygon - A polygon of a surface mesh. Mesh edge - A segment of a linear mesh. Vertex - A corner point of a mesh cell, a mesh polygon or a mesh edge. Facet - A (N-1) boundary of a mesh element A face of a mesh cell An edge of a mesh polygon A vertex of a mesh edge Mesh: Set of elements Structured mesh - A mesh with regular connectivity meaning that each vertex is connected to the same number of vertices. Unstructured mesh - A mesh with any connectivity between vertices. Entity Notion Topology - Connectivity information between entities.","title":"Glossary"},{"location":"glossary/#glossary","text":"This page gives definitions of the words commonly used in the RINGMesh project.","title":"Glossary"},{"location":"glossary/#base-objects","text":"Point - A position in space: (x,y) in 2D or (x,y,z) in 3D. Segment - Part of a line bounded by two distinct points. Polygon - Part of a plane bounded by a finite number of non-intersecting segments closing in a loop. Polyhedron - Part of a space bounded by a finite number of non-intersecting polygons defining an interior and an exterior. N-simplex - The convex-hull of N+1 points Point: 0-simplex Segment: 1-simplex Triangle: 2-simplex Tetrahedron: 3-simplex","title":"Base objects"},{"location":"glossary/#elements-of-a-mesh","text":"Mesh cell - A polyhedron of a volumetric mesh. Mesh polygon - A polygon of a surface mesh. Mesh edge - A segment of a linear mesh. Vertex - A corner point of a mesh cell, a mesh polygon or a mesh edge. Facet - A (N-1) boundary of a mesh element A face of a mesh cell An edge of a mesh polygon A vertex of a mesh edge","title":"Elements of a mesh"},{"location":"glossary/#mesh-set-of-elements","text":"Structured mesh - A mesh with regular connectivity meaning that each vertex is connected to the same number of vertices. Unstructured mesh - A mesh with any connectivity between vertices.","title":"Mesh: Set of elements"},{"location":"glossary/#entity","text":"","title":"Entity"},{"location":"glossary/#notion","text":"Topology - Connectivity information between entities.","title":"Notion"},{"location":"features/file_formats/","text":"Input and Output file formats The GeoModel is the Data Model powered by RINGMesh (see the full description of the GeoModel here . RINGMesh proposes an home-made file format with the .gm extension to read and write GeoModels. Beyond that, RINGMesh provides an extensible design to ease your possibility to add new file formats. We present here an exhaustive list of input and output file formats currently supported by RINGMesh. These file formats are different if you are dealing with GeoModels in 3D or if you are dealing with a 2D cross section of a GeoModel (called GeoModel2D ). Input/Output GeoModels in 3D Inputs GeoModel3D Extension Software .gm RINGMesh .ml SKUA-GOCAD .so SKUA-GOCAD .msh (in progress) GMSH Outputs GeoModel3D Extension Software .gm RINGMesh .ml SKUA-GOCAD .so SKUA-GOCAD .msh GMSH .tetgen TetGen .csmp CSMP++ .vtk ParaView .mfem MFEM .inp Abaqus .adeli Adeli .fem Feflow .smesh Smesh .stl Input/Output GeoModel cross section in 2D Inputs GeoModel2D Extension Software .gm RINGMesh .model Stradivarius .svg .msh (in progress) GMSH Outputs GeoModel2D Extension Software .gm RINGMesh .mfem MFEM .msh (in progress) GMSH Conversion For converting a geological model from one file format to another, you can make use of the utility executable shipped with RINGMesh: ringmesh-convert . Here is the command syntax: ringmesh-convert in:geomodel=/path/to/your/file.ext1 out:geomodel=/where/you/want/to/save/file.ext2 Note: to generate and compile this executable, you should select the option RINGMESH_WITH_UTILITIES in the cmake configuration options.","title":"Supported file formats"},{"location":"features/file_formats/#input-and-output-file-formats","text":"The GeoModel is the Data Model powered by RINGMesh (see the full description of the GeoModel here . RINGMesh proposes an home-made file format with the .gm extension to read and write GeoModels. Beyond that, RINGMesh provides an extensible design to ease your possibility to add new file formats. We present here an exhaustive list of input and output file formats currently supported by RINGMesh. These file formats are different if you are dealing with GeoModels in 3D or if you are dealing with a 2D cross section of a GeoModel (called GeoModel2D ).","title":"Input and Output file formats"},{"location":"features/file_formats/#inputoutput-geomodels-in-3d","text":"","title":"Input/Output GeoModels in 3D"},{"location":"features/file_formats/#inputs-geomodel3d","text":"Extension Software .gm RINGMesh .ml SKUA-GOCAD .so SKUA-GOCAD .msh (in progress) GMSH","title":"Inputs GeoModel3D"},{"location":"features/file_formats/#outputs-geomodel3d","text":"Extension Software .gm RINGMesh .ml SKUA-GOCAD .so SKUA-GOCAD .msh GMSH .tetgen TetGen .csmp CSMP++ .vtk ParaView .mfem MFEM .inp Abaqus .adeli Adeli .fem Feflow .smesh Smesh .stl","title":"Outputs GeoModel3D"},{"location":"features/file_formats/#inputoutput-geomodel-cross-section-in-2d","text":"","title":"Input/Output GeoModel cross section in 2D"},{"location":"features/file_formats/#inputs-geomodel2d","text":"Extension Software .gm RINGMesh .model Stradivarius .svg .msh (in progress) GMSH","title":"Inputs GeoModel2D"},{"location":"features/file_formats/#outputs-geomodel2d","text":"Extension Software .gm RINGMesh .mfem MFEM .msh (in progress) GMSH","title":"Outputs GeoModel2D"},{"location":"features/file_formats/#conversion","text":"For converting a geological model from one file format to another, you can make use of the utility executable shipped with RINGMesh: ringmesh-convert . Here is the command syntax: ringmesh-convert in:geomodel=/path/to/your/file.ext1 out:geomodel=/where/you/want/to/save/file.ext2 Note: to generate and compile this executable, you should select the option RINGMESH_WITH_UTILITIES in the cmake configuration options.","title":"Conversion"},{"location":"features/geomodel/","text":"GeoModel: Mutable object composition to represent Geological Model The key feature of RINGMesh is the RINGMesh::GeoModel . It aims at representing a geological model with a level of complexity adapted to the problem to solve. Geological objects are complex and multiscale. The first way to represent and discretize a high level of detail is to use a mesh composition of Entities called RINGMesh::GeoModelEntities . In this case, the RINGMesh::GeoModel defines the boundary representation of major geological objects holding the discretization and connectivity between Entities. The second way to deal with the geological model is to consider the global geometry through a single mesh. The RINGMesh::GeoModel have that ability to build a RINGMesh::GeoModelMesh on the fly. In this object, every node, edge, polygon and cell can be assessed through a global index. It also enables a duplication of nodes along surfaces. This is useful to feed some physical simulators and export several data structure formats. GeoModel Constitutive Elements: GeoModelEntity A model is defined by its constitutive elements RINGMesh::GeoModelEntity . There are two main kinds of entities (see figure below): Geometrical entities that define the geometry of the model through several dimensions: Regions Surfaces Lines Corners Geological entities that group several geometrical entities according to their geological meaning: Layers Interfaces Contacts Figure: Geomodel entities divided into the geometrical entities and the geological entities. Figure from Pellerin et al. (2017). We know that this is not a complete list. A lot of entities would be valuable to complete the model. We strongly encourage people to contribute and complete these lists :) GeoModel Geometrical Entities: GeoModelMeshEntity A set of RINGMesh::GeoModelMeshEntity holds the discretization and the boundary representation of the geological model. Each mesh entity knows all connected higher and lower dimension mesh entities. Even if the topology between Entities is known, each RINGMesh::GeoModelMeshEntity stores its own mesh data structure independently of each other and you cannot get any global information. Geometrical information is contained by an abstract mesh class implemented in RINGMesh. This abstraction level is a strength of RINGMesh because it can be adapted to any data structure and eases the coupling between softwares ( more details about meshes ). A RINGMesh::Region is a volume defined by a set of RingMesh::Surface creating a closed \"box\". Every surface that bounds a region can be accessed by its index. A region can be meshed with cells. A RINGMesh::Surface is defined by a set of RINGMesh::Line creating a closed curve. It defines one border of a RINGMesh::Region . Neighboring lines and surfaces can be accessed by their indices. A RINGMesh::Line is defined by two RINGMesh::Corner . Connected corners and surfaces can be accessed by their indices. A RINGMesh::Corner is a single node that bounds a RingMesh::Line . Connected lines can be accessed by their indices. GeoModel Geological Entities: GeoModelGeologicalEntity A RINGMesh::GeoModelGeologicalEntity stores a geological-based topological structure. It uses a kind of parent/child implementation where RINGMesh::GeoModelGeologicalEntity is the parent of its children RINGMesh::GeoModelMeshEntity . The main idea is to cluster several geometrical entities that compose a geological object. RINGMesh::Layer is composed by several RINGMesh::Region. A layer is the parent of several children regions. It represents a geological layer. RINGMesh::Interface is composed by several RINGMesh::Surface. An interface is the parent of several children surfaces. It represents a geological object such as a fault or a horizon. A RINGMesh::Contact (parent) is composed by several RINGMesh::Line (children). It corresponds to the intersection between two RINGMesh::Interface . GeoModel Global Representation: GeoModelMesh The GeoModelMesh is one mesh built by copying and merging all RINGMesh::GeoModelMeshEntity of the GeoModel in a global and unique mesh. It allows to access to (1) a more general information than the one stored inside the mesh of RINGMesh::GeoModelEntity , and (2) a single mesh representing the entire geological model. To ease the global access to vertices, edges, facets and cells without redundancy at GeoModel geometrical entity borders; four databases are available. These databases are empty by default and are automatically filled as soon as they are used. The RINGMesh::GeoModelMeshVertices gives a global and unique access to any vertex of the GeoModel. The RINGMesh::GeoModelMeshEdges gives a global and unique access to any edge and adjacent edges of each GeoModel contacts. The RINGMesh::GeoModelMeshPolygons gives a global and unique access to any polygon and adjacent polygons of each GeoModel interfaces. The RINGMesh::GeoModelMeshCells gives a global access to any cell and its adjacent cells. At the mesh interfaces cells can be either connected or disconnected. Several disconnection modes are available according to the geologic features. No Duplication Duplication along faults only Duplication along horizons only Duplication along faults and horizons The RINGMesh::GeoModelMeshWells is a particular database to ease the iteration on well geometry. It provides a global and unique access to any edge and adjacent edges of wells.","title":"GeoModel"},{"location":"features/geomodel/#geomodel-mutable-object-composition-to-represent-geological-model","text":"The key feature of RINGMesh is the RINGMesh::GeoModel . It aims at representing a geological model with a level of complexity adapted to the problem to solve. Geological objects are complex and multiscale. The first way to represent and discretize a high level of detail is to use a mesh composition of Entities called RINGMesh::GeoModelEntities . In this case, the RINGMesh::GeoModel defines the boundary representation of major geological objects holding the discretization and connectivity between Entities. The second way to deal with the geological model is to consider the global geometry through a single mesh. The RINGMesh::GeoModel have that ability to build a RINGMesh::GeoModelMesh on the fly. In this object, every node, edge, polygon and cell can be assessed through a global index. It also enables a duplication of nodes along surfaces. This is useful to feed some physical simulators and export several data structure formats.","title":"GeoModel: Mutable object composition to represent Geological Model"},{"location":"features/geomodel/#geomodel-constitutive-elements-geomodelentity","text":"A model is defined by its constitutive elements RINGMesh::GeoModelEntity . There are two main kinds of entities (see figure below): Geometrical entities that define the geometry of the model through several dimensions: Regions Surfaces Lines Corners Geological entities that group several geometrical entities according to their geological meaning: Layers Interfaces Contacts Figure: Geomodel entities divided into the geometrical entities and the geological entities. Figure from Pellerin et al. (2017). We know that this is not a complete list. A lot of entities would be valuable to complete the model. We strongly encourage people to contribute and complete these lists :)","title":"GeoModel Constitutive Elements: GeoModelEntity"},{"location":"features/geomodel/#geomodel-geometrical-entities-geomodelmeshentity","text":"A set of RINGMesh::GeoModelMeshEntity holds the discretization and the boundary representation of the geological model. Each mesh entity knows all connected higher and lower dimension mesh entities. Even if the topology between Entities is known, each RINGMesh::GeoModelMeshEntity stores its own mesh data structure independently of each other and you cannot get any global information. Geometrical information is contained by an abstract mesh class implemented in RINGMesh. This abstraction level is a strength of RINGMesh because it can be adapted to any data structure and eases the coupling between softwares ( more details about meshes ). A RINGMesh::Region is a volume defined by a set of RingMesh::Surface creating a closed \"box\". Every surface that bounds a region can be accessed by its index. A region can be meshed with cells. A RINGMesh::Surface is defined by a set of RINGMesh::Line creating a closed curve. It defines one border of a RINGMesh::Region . Neighboring lines and surfaces can be accessed by their indices. A RINGMesh::Line is defined by two RINGMesh::Corner . Connected corners and surfaces can be accessed by their indices. A RINGMesh::Corner is a single node that bounds a RingMesh::Line . Connected lines can be accessed by their indices.","title":"GeoModel Geometrical Entities: GeoModelMeshEntity"},{"location":"features/geomodel/#geomodel-geological-entities-geomodelgeologicalentity","text":"A RINGMesh::GeoModelGeologicalEntity stores a geological-based topological structure. It uses a kind of parent/child implementation where RINGMesh::GeoModelGeologicalEntity is the parent of its children RINGMesh::GeoModelMeshEntity . The main idea is to cluster several geometrical entities that compose a geological object. RINGMesh::Layer is composed by several RINGMesh::Region. A layer is the parent of several children regions. It represents a geological layer. RINGMesh::Interface is composed by several RINGMesh::Surface. An interface is the parent of several children surfaces. It represents a geological object such as a fault or a horizon. A RINGMesh::Contact (parent) is composed by several RINGMesh::Line (children). It corresponds to the intersection between two RINGMesh::Interface .","title":"GeoModel Geological Entities: GeoModelGeologicalEntity"},{"location":"features/geomodel/#geomodel-global-representation-geomodelmesh","text":"The GeoModelMesh is one mesh built by copying and merging all RINGMesh::GeoModelMeshEntity of the GeoModel in a global and unique mesh. It allows to access to (1) a more general information than the one stored inside the mesh of RINGMesh::GeoModelEntity , and (2) a single mesh representing the entire geological model. To ease the global access to vertices, edges, facets and cells without redundancy at GeoModel geometrical entity borders; four databases are available. These databases are empty by default and are automatically filled as soon as they are used. The RINGMesh::GeoModelMeshVertices gives a global and unique access to any vertex of the GeoModel. The RINGMesh::GeoModelMeshEdges gives a global and unique access to any edge and adjacent edges of each GeoModel contacts. The RINGMesh::GeoModelMeshPolygons gives a global and unique access to any polygon and adjacent polygons of each GeoModel interfaces. The RINGMesh::GeoModelMeshCells gives a global access to any cell and its adjacent cells. At the mesh interfaces cells can be either connected or disconnected. Several disconnection modes are available according to the geologic features. No Duplication Duplication along faults only Duplication along horizons only Duplication along faults and horizons The RINGMesh::GeoModelMeshWells is a particular database to ease the iteration on well geometry. It provides a global and unique access to any edge and adjacent edges of wells.","title":"GeoModel Global Representation: GeoModelMesh"},{"location":"features/mesh/","text":"Under construction","title":"Mesh"},{"location":"features/mesh/#under-construction","text":"","title":"Under construction"},{"location":"features/validity/","text":"Validate your GeoModel with RINGMesh! \"Validity\" is a complex and non-unique notion that often depends on application requirements of the tools you used to solve a particular problem. Considering that, RINGMesh provides a set of checks to ensure: the topological and geometrical \"validity\" of each GeoModel entities (both geometrical and geological); the \"validity\" of the GeoModel itself. Note: by default, all checks are verified at GeoModel loading. You can always disable some or all the checks with the command line option validity:do_not_check . GeoModel topology validation Finite extension This first check ensures the finite extension of your GeoModel . In other words, we verify if we can define the interior and the exterior of your GeoModel . This check is defined both in 2D and 3D. All the entities defining the external boundary of the GeoModel (i.e. Lines in 2D and Surfaces in 3D) should define: a closed boundary; a unique connected component. Geometrical entiy mapping consistency We check if the relationships between the geometrical entities are consistent by verifying: the bijectivity of Boundary / Incident Entity relationships. If a Line L is a border of a Surface S, we ensure that (1) L is in the border Entity list of S and (2) S is in the incident Entity list of L. each Entity is in the boundary of at least one another Entity (except for Regions in 3D and Surfaces in 2D). Geological entiy mapping consistency We check if the relationships between the geological entities are consistent by verifying: each geological Entity must have at least one Child geometrical Entity; the bijectivity between Parent / Child relationships. GeoModel geometry validation Classic geometric checks We ensure some minimal requirements on the geometry: no degenerated mesh element; a geometrical Entity is composed by a unique connected component; no isolated vertices; no non-manifold edges; no intersection between any Surface polygons in the GeoModel . Conformity between geometrical entity meshes (TODO: Figure) The conformity is checked following these properties: between Lines and their Corners boundary: the vertex of corner is a vertex on the border of incident Lines ; between Surfaces and their Lines boundary: all the vertices and all the edges of a Line are also vertices and edges on the border of incident Surfaces ; between Regions and their Surfaces boundary: all the vertices and all the edges and all the polygons of a Surface are also vertices, edges and cell facets on the border of incident Regions . RINGMesh conventions We check a consistent mapping between GeoModelMesh vertex indexation and vertex indexations in geometrical Entities .","title":"Validity"},{"location":"features/validity/#validate-your-geomodel-with-ringmesh","text":"\"Validity\" is a complex and non-unique notion that often depends on application requirements of the tools you used to solve a particular problem. Considering that, RINGMesh provides a set of checks to ensure: the topological and geometrical \"validity\" of each GeoModel entities (both geometrical and geological); the \"validity\" of the GeoModel itself. Note: by default, all checks are verified at GeoModel loading. You can always disable some or all the checks with the command line option validity:do_not_check .","title":"Validate your GeoModel with RINGMesh!"},{"location":"features/validity/#geomodel-topology-validation","text":"","title":"GeoModel topology validation"},{"location":"features/validity/#finite-extension","text":"This first check ensures the finite extension of your GeoModel . In other words, we verify if we can define the interior and the exterior of your GeoModel . This check is defined both in 2D and 3D. All the entities defining the external boundary of the GeoModel (i.e. Lines in 2D and Surfaces in 3D) should define: a closed boundary; a unique connected component.","title":"Finite extension"},{"location":"features/validity/#geometrical-entiy-mapping-consistency","text":"We check if the relationships between the geometrical entities are consistent by verifying: the bijectivity of Boundary / Incident Entity relationships. If a Line L is a border of a Surface S, we ensure that (1) L is in the border Entity list of S and (2) S is in the incident Entity list of L. each Entity is in the boundary of at least one another Entity (except for Regions in 3D and Surfaces in 2D).","title":"Geometrical entiy mapping consistency"},{"location":"features/validity/#geological-entiy-mapping-consistency","text":"We check if the relationships between the geological entities are consistent by verifying: each geological Entity must have at least one Child geometrical Entity; the bijectivity between Parent / Child relationships.","title":"Geological entiy mapping consistency"},{"location":"features/validity/#geomodel-geometry-validation","text":"","title":"GeoModel geometry validation"},{"location":"features/validity/#classic-geometric-checks","text":"We ensure some minimal requirements on the geometry: no degenerated mesh element; a geometrical Entity is composed by a unique connected component; no isolated vertices; no non-manifold edges; no intersection between any Surface polygons in the GeoModel .","title":"Classic geometric checks"},{"location":"features/validity/#conformity-between-geometrical-entity-meshes-todo-figure","text":"The conformity is checked following these properties: between Lines and their Corners boundary: the vertex of corner is a vertex on the border of incident Lines ; between Surfaces and their Lines boundary: all the vertices and all the edges of a Line are also vertices and edges on the border of incident Surfaces ; between Regions and their Surfaces boundary: all the vertices and all the edges and all the polygons of a Surface are also vertices, edges and cell facets on the border of incident Regions .","title":"Conformity between geometrical entity meshes (TODO: Figure)"},{"location":"features/validity/#ringmesh-conventions","text":"We check a consistent mapping between GeoModelMesh vertex indexation and vertex indexations in geometrical Entities .","title":"RINGMesh conventions"},{"location":"features/viewer/","text":"Under construction","title":"Under construction"},{"location":"features/viewer/#under-construction","text":"","title":"Under construction"},{"location":"try/documentation/","text":"Doxygen documentation The doxygen documentation for the latest Release is available here .","title":"Doxygen documentation"},{"location":"try/documentation/#doxygen-documentation","text":"The doxygen documentation for the latest Release is available here .","title":"Doxygen documentation"},{"location":"try/installation/","text":"Get Started with RINGMesh About the source code Download the source Code The source code is available by: cloning the directory from GitHub downloading an archive of the sources ( Releases or latest developments ) For more information, please follow the instructions of the Download section. Configure and compile the source Code RINGMesh is tested under: Linux (64bits) Windows (64 bits) Mac OS (64 bits) Please find the corresponding instruction in the configure and compile tutorial . About pre-compiled packages Pre-compiled packages are available in the Download section. After having downloaded the archive that correspond to your operating system, please extract the files in the folder where you want to use it. Develop with RINGMesh RINGMesh is a library that provide a development API with functions that can be used in an external project. We provide an example of a project that set the dependency with RINGMesh and use some functions from the RINGMesh API. Please Look at the RINGMesh Plugin example on GitHub . Once your project is started, you can follow some tutorials to learn more about the RINGMesh API. RINGMesh Utilities To access the utilities RINGMesh needs to be configured and compiled with the corresponding option. If you did not check that option during the configuration using CMake please go back to the configure and compile tutorial and select the RINGMESH_WITH_UTILITIES option. Pre-compiled packages have been built with the RINGMESH_WITH_UTILITIES option. After building RINGMesh with utilities a set of executable is generated and can be executed from the RINGMesh install directory: Window: RINGMesh\\build\\ringmesh\\bin\\CONFIG\\**.exe Linux: RINGMesh\\build\\ringmesh\\CONFIG\\bin\\**.exe Here is the list of the RINGMesh utilities: ringmesh-convert : Load a GeoModel, check its validity and export GeoModel. Supported input and output file formats are listed here . Performed validity checks performed are explained here . ringmesh-edit-infos : Edit information of a GeoModel (such as its name) and save this change in the same file (overwrite) or another one. ringmesh-mesh-quality : Load a GeoModel and compute its cell quality. Several metrics are available and the results are stored as an Attribute on each cell. Warning: this is only applicable on GeoModel with Regions meshed with tetrahedra. ringmesh-repair : Load a Geomodel and repair some basic issues such as geometrical issues on meshes (duplicated vertices, degenerated mesh elements). ringmesh-rotate : Load and rotate a GeoModel using a reference frame and an angle. ringmesh-stats : Load and print statistics on number of entities, and mesh elements in the GeoModel. ringmesh-surface-convert : Load a set of TSurfs (Gocad file format) and output a set on triangulated surfaces into a file format supported by GEOGRAM. ringmesh-tetrahedralize : Load a boundary representation (B-Rep) and fill its Regions with tetrahedra using TetGen or another mesher. ringmesh-translate : Load and translate a GeoModel using a 3D vector. A description of both functionalities and input parameters is displayed while launching the executable.","title":"Get started"},{"location":"try/installation/#get-started-with-ringmesh","text":"","title":"Get Started with RINGMesh"},{"location":"try/installation/#about-the-source-code","text":"","title":"About the source code"},{"location":"try/installation/#download-the-source-code","text":"The source code is available by: cloning the directory from GitHub downloading an archive of the sources ( Releases or latest developments ) For more information, please follow the instructions of the Download section.","title":"Download the source Code"},{"location":"try/installation/#configure-and-compile-the-source-code","text":"RINGMesh is tested under: Linux (64bits) Windows (64 bits) Mac OS (64 bits) Please find the corresponding instruction in the configure and compile tutorial .","title":"Configure and compile the source Code"},{"location":"try/installation/#about-pre-compiled-packages","text":"Pre-compiled packages are available in the Download section. After having downloaded the archive that correspond to your operating system, please extract the files in the folder where you want to use it.","title":"About pre-compiled packages"},{"location":"try/installation/#develop-with-ringmesh","text":"RINGMesh is a library that provide a development API with functions that can be used in an external project. We provide an example of a project that set the dependency with RINGMesh and use some functions from the RINGMesh API. Please Look at the RINGMesh Plugin example on GitHub . Once your project is started, you can follow some tutorials to learn more about the RINGMesh API.","title":"Develop with RINGMesh"},{"location":"try/installation/#ringmesh-utilities","text":"To access the utilities RINGMesh needs to be configured and compiled with the corresponding option. If you did not check that option during the configuration using CMake please go back to the configure and compile tutorial and select the RINGMESH_WITH_UTILITIES option. Pre-compiled packages have been built with the RINGMESH_WITH_UTILITIES option. After building RINGMesh with utilities a set of executable is generated and can be executed from the RINGMesh install directory: Window: RINGMesh\\build\\ringmesh\\bin\\CONFIG\\**.exe Linux: RINGMesh\\build\\ringmesh\\CONFIG\\bin\\**.exe Here is the list of the RINGMesh utilities: ringmesh-convert : Load a GeoModel, check its validity and export GeoModel. Supported input and output file formats are listed here . Performed validity checks performed are explained here . ringmesh-edit-infos : Edit information of a GeoModel (such as its name) and save this change in the same file (overwrite) or another one. ringmesh-mesh-quality : Load a GeoModel and compute its cell quality. Several metrics are available and the results are stored as an Attribute on each cell. Warning: this is only applicable on GeoModel with Regions meshed with tetrahedra. ringmesh-repair : Load a Geomodel and repair some basic issues such as geometrical issues on meshes (duplicated vertices, degenerated mesh elements). ringmesh-rotate : Load and rotate a GeoModel using a reference frame and an angle. ringmesh-stats : Load and print statistics on number of entities, and mesh elements in the GeoModel. ringmesh-surface-convert : Load a set of TSurfs (Gocad file format) and output a set on triangulated surfaces into a file format supported by GEOGRAM. ringmesh-tetrahedralize : Load a boundary representation (B-Rep) and fill its Regions with tetrahedra using TetGen or another mesher. ringmesh-translate : Load and translate a GeoModel using a 3D vector. A description of both functionalities and input parameters is displayed while launching the executable.","title":"RINGMesh Utilities"},{"location":"try/try_online/","text":"Under Construction","title":"Try online"},{"location":"try/try_online/#under-construction","text":"","title":"Under Construction"},{"location":"try/tutorials/","text":"Tutorials Basics Configure and Compile : How to configure and compile RINGMesh source code. Integrate RINGMesh : How to create a project depending on RINGMesh. GeoModel Basics : How to build and use GeoModels. Advanced Into the GeoModel : Learn more about the GeoModel Entities and Topology.","title":"Tutorials"},{"location":"try/tutorials/#tutorials","text":"","title":"Tutorials"},{"location":"try/tutorials/#basics","text":"Configure and Compile : How to configure and compile RINGMesh source code. Integrate RINGMesh : How to create a project depending on RINGMesh. GeoModel Basics : How to build and use GeoModels.","title":"Basics"},{"location":"try/tutorials/#advanced","text":"Into the GeoModel : Learn more about the GeoModel Entities and Topology.","title":"Advanced"},{"location":"try/tutorials/configure_compile_ringmesh/","text":"Configure and compile RINGMesh source code RINGMesh Configuration options RINGMesh comes with a CMake configuration file. Several options can be selected in order to build the project that fits your needs: BUILD_GEOGRAM_WITHOUT_EXE : Builds the GEOGRAM libraries used in RINGMesh without building executable from GEOGRAM. (This option is availabe if CMake is in advanced mode) RINGMESH_WITH_GRAPHICS : Builds graphical libraries of RINGMesh and GEOGRAM. BUILD_RINGMESH_VIEW : (if option RINGMESH_WITH_GRAPHICS is on) Builds the viewer to visualize the GeoModel data structure. RINGMESH_WITH_RESQML2 : Builds RESQML2 support: compile with FesAPI (not avaible for MACOS) RINGMESH_WITH_TESTS : Builds the RINGMesh test environment. RINGMESH_WITH_TETGEN : Builds the TetGen wrapper library. This option provides functionalities to mesh and re-mesh volume and surfaces with TetGen. Please make sure that you respect the AGPLv3 license before checking that option. RINGMESH_WITH_TUTORIALS : Build the tutorial environment. RINGMESH_WITH_UTILITIES : Build all executable corresponding to RINGMesh utilities. Linux configuration and compilation Toolbox Mandatory tools CMake (version >= 3.1) gcc/g++ (version >= 4.8; C++11 support) Other dependencies To compile the graphical libraries of RINGMesh (more precisely of Geogram), you need to install the development package of: X11 XRandR Xinerama Xcursor FreeGlut X Input Extension To compile FesAPI on a Linux OS you need to install the development package of: UUID The command line under Debian-based OS to install all the necessary packages to compile RINGMesh is: sudo apt-get install build-essential libx11-dev libxrandr-dev libxinerama-dev libxcursor-dev freeglut3-dev libxi-dev uuid-dev Optional tools Eclipse-cdt project is provided (.project and .cproject). You can import RINGMesh into Eclipse: File>Import...>General>Existing Projects into Workspace. Doxygen (version >= 1.8.2; C++11 support). This is required if you want to build the documentation. There is no other dependency (everything you need is shipped with RINGMesh). Configuring RINGMesh Execute cmake command in a RINGMesh/build directory. mkdir build cd build To configure using default options: cmake .. To define the options, use the cmake interface cmake-gui .. or ccmake .. Compiling RINGMesh To compile RINGMesh, go to RINGMesh root directory and: cd build/Release make To build in debug, go to build/Debug instead. Note: RINGMesh uses C++ 11 features. You need gcc/g++ version higher or equal to 4.8 to compile it. Troubleshooting If you get this error during geogram gfx compilation (occured for Ubuntu 17.04): No rule to make target '/usr/lib/x86_64-linux-gnu/libGL.so' you can try under root: rm /usr/lib/x86_64-linux-gnu/libGL.so ln -s /usr/lib/libGL.so.1 /usr/lib/x86_64-linux-gnu/libGL.so Generating the documentation If Doxygen is installed on your computer, a target doc-devkit is built during RINGMesh configuration. You can generate the documentation using the following command in the RINGMesh_root/build/config directory: make doc-devkit Open the RINGMesh documentation with your favorite web browser at: RINGMesh_root/build/config/ringmesh/devkit/html/index.html Windows configure and compile Toolbox Mandatory tools CMake (version >= 3.1) gcc/g++ (version >= 4.8; C++11 support) Optional tools RINGMesh is tested using Visual Studio. Make sure that you have installed C++ package for Visual Studio through the Visual Studio installer. It compiles with the following version: Visual Studio 12 2013 Win64 Visual Studio 14 2015 Win64 Visual Studio 15 2017 Win64 Doxygen (version >= 1.8.2; C++11 support). This is required if you want to build the documentation. There is no other dependency (everything you need is shipped with RINGMesh). Configuring RINGMesh Launch CMake GUI interface (version >= 3.1). Indicate where is the source code as the path to RINGMesh root and where to put the binaries as RINGMesh_root/build . Set the Configuration options using the CMake GUI interface. Launch the configure and generate option. Compiling RINGMesh RINGMesh need several third parties that are automatically compiled and installed by compiling the project SUPERBUILD.sln . Open the project SUPERBUILD.sln with the visual studio version that you choose during the configuration step. Build the solution. All the RINGMesh third parties have now been compiled, installed and the RINGMesh.sln project have been created in the repository: RINGMesh_root/build/ringmesh . Open the project RINGMesh.sln . Build the solution. The available compilation modes are: Release Debug RelWithDebInfo Note: Visual Studio has on pile per configuration mode. You must link consistently with the expected configuration mode. Compiling the documentation If Doxygen (version >= 1.8.2) is installed on your computer, a target doc-devkit is built during RINGMesh configuration. You can generate the documentation by: * Opening the solution which is in RINGMesh_root/build/ringmesh/RINGMesh.sln in Visual Studio * Building the doc-devkit Open the RINGMesh documentation with your favorite web browser at: RINGMesh_root\\build\\ringmesh\\devkit\\html\\index.html Mac OS configure and compile Toolbox Mandatory tools CMake (version >= 3.1) gcc/g++ (version >= 4.8; C++11 support) Optional tools Doxygen (version >= 1.8.2; C++11 support). This is required if you want to build the documentation. There is no other dependency (everything you need is shipped with RINGMesh). Configuring RINGMesh Using clang (without Xcode) As in Linux. Using Xcode IDE As in Windows but with the Xcode generator (use \"-G Xcode\" if you use cmake in command lines). Compiling RINGMesh You need to install the Mac OS \"Command Line Developer Tools\". Note: you need gcc/g++ version higher or equal to 4.2 to compile RINGMesh. In Mac OS, clang is used. Using clang (without Xcode) As in Linux except for the packages. Using Xcode IDE You need to install Xcode IDE. Open the build/ringmesh/RINGMesh.xcodeproj with Xcode IDE, and then compile (as in Windows with VisualStudio). Or use these command lines: cd build/ringmesh xcodebuild -project RINGMesh.xcodeproj -alltargets -configuration Release To build in Debug, replace \"Release\" by \"Debug\" after \"-configuration\".","title":"_Configure Compile"},{"location":"try/tutorials/configure_compile_ringmesh/#configure-and-compile-ringmesh-source-code","text":"","title":"Configure and compile RINGMesh source code"},{"location":"try/tutorials/configure_compile_ringmesh/#ringmesh-configuration-options","text":"RINGMesh comes with a CMake configuration file. Several options can be selected in order to build the project that fits your needs: BUILD_GEOGRAM_WITHOUT_EXE : Builds the GEOGRAM libraries used in RINGMesh without building executable from GEOGRAM. (This option is availabe if CMake is in advanced mode) RINGMESH_WITH_GRAPHICS : Builds graphical libraries of RINGMesh and GEOGRAM. BUILD_RINGMESH_VIEW : (if option RINGMESH_WITH_GRAPHICS is on) Builds the viewer to visualize the GeoModel data structure. RINGMESH_WITH_RESQML2 : Builds RESQML2 support: compile with FesAPI (not avaible for MACOS) RINGMESH_WITH_TESTS : Builds the RINGMesh test environment. RINGMESH_WITH_TETGEN : Builds the TetGen wrapper library. This option provides functionalities to mesh and re-mesh volume and surfaces with TetGen. Please make sure that you respect the AGPLv3 license before checking that option. RINGMESH_WITH_TUTORIALS : Build the tutorial environment. RINGMESH_WITH_UTILITIES : Build all executable corresponding to RINGMesh utilities.","title":"RINGMesh Configuration options"},{"location":"try/tutorials/configure_compile_ringmesh/#linux-configuration-and-compilation","text":"","title":"Linux configuration and compilation"},{"location":"try/tutorials/configure_compile_ringmesh/#toolbox","text":"","title":"Toolbox"},{"location":"try/tutorials/configure_compile_ringmesh/#mandatory-tools","text":"CMake (version >= 3.1) gcc/g++ (version >= 4.8; C++11 support)","title":"Mandatory tools"},{"location":"try/tutorials/configure_compile_ringmesh/#other-dependencies","text":"To compile the graphical libraries of RINGMesh (more precisely of Geogram), you need to install the development package of: X11 XRandR Xinerama Xcursor FreeGlut X Input Extension To compile FesAPI on a Linux OS you need to install the development package of: UUID The command line under Debian-based OS to install all the necessary packages to compile RINGMesh is: sudo apt-get install build-essential libx11-dev libxrandr-dev libxinerama-dev libxcursor-dev freeglut3-dev libxi-dev uuid-dev","title":"Other dependencies"},{"location":"try/tutorials/configure_compile_ringmesh/#optional-tools","text":"Eclipse-cdt project is provided (.project and .cproject). You can import RINGMesh into Eclipse: File>Import...>General>Existing Projects into Workspace. Doxygen (version >= 1.8.2; C++11 support). This is required if you want to build the documentation. There is no other dependency (everything you need is shipped with RINGMesh).","title":"Optional tools"},{"location":"try/tutorials/configure_compile_ringmesh/#configuring-ringmesh","text":"Execute cmake command in a RINGMesh/build directory. mkdir build cd build To configure using default options: cmake .. To define the options, use the cmake interface cmake-gui .. or ccmake ..","title":"Configuring RINGMesh"},{"location":"try/tutorials/configure_compile_ringmesh/#compiling-ringmesh","text":"To compile RINGMesh, go to RINGMesh root directory and: cd build/Release make To build in debug, go to build/Debug instead. Note: RINGMesh uses C++ 11 features. You need gcc/g++ version higher or equal to 4.8 to compile it.","title":"Compiling RINGMesh"},{"location":"try/tutorials/configure_compile_ringmesh/#troubleshooting","text":"If you get this error during geogram gfx compilation (occured for Ubuntu 17.04): No rule to make target '/usr/lib/x86_64-linux-gnu/libGL.so' you can try under root: rm /usr/lib/x86_64-linux-gnu/libGL.so ln -s /usr/lib/libGL.so.1 /usr/lib/x86_64-linux-gnu/libGL.so","title":"Troubleshooting"},{"location":"try/tutorials/configure_compile_ringmesh/#generating-the-documentation","text":"If Doxygen is installed on your computer, a target doc-devkit is built during RINGMesh configuration. You can generate the documentation using the following command in the RINGMesh_root/build/config directory: make doc-devkit Open the RINGMesh documentation with your favorite web browser at: RINGMesh_root/build/config/ringmesh/devkit/html/index.html","title":"Generating the documentation"},{"location":"try/tutorials/configure_compile_ringmesh/#windows-configure-and-compile","text":"","title":"Windows configure and compile"},{"location":"try/tutorials/configure_compile_ringmesh/#toolbox_1","text":"","title":"Toolbox"},{"location":"try/tutorials/configure_compile_ringmesh/#mandatory-tools_1","text":"CMake (version >= 3.1) gcc/g++ (version >= 4.8; C++11 support)","title":"Mandatory tools"},{"location":"try/tutorials/configure_compile_ringmesh/#optional-tools_1","text":"RINGMesh is tested using Visual Studio. Make sure that you have installed C++ package for Visual Studio through the Visual Studio installer. It compiles with the following version: Visual Studio 12 2013 Win64 Visual Studio 14 2015 Win64 Visual Studio 15 2017 Win64 Doxygen (version >= 1.8.2; C++11 support). This is required if you want to build the documentation. There is no other dependency (everything you need is shipped with RINGMesh).","title":"Optional tools"},{"location":"try/tutorials/configure_compile_ringmesh/#configuring-ringmesh_1","text":"Launch CMake GUI interface (version >= 3.1). Indicate where is the source code as the path to RINGMesh root and where to put the binaries as RINGMesh_root/build . Set the Configuration options using the CMake GUI interface. Launch the configure and generate option.","title":"Configuring RINGMesh"},{"location":"try/tutorials/configure_compile_ringmesh/#compiling-ringmesh_1","text":"RINGMesh need several third parties that are automatically compiled and installed by compiling the project SUPERBUILD.sln . Open the project SUPERBUILD.sln with the visual studio version that you choose during the configuration step. Build the solution. All the RINGMesh third parties have now been compiled, installed and the RINGMesh.sln project have been created in the repository: RINGMesh_root/build/ringmesh . Open the project RINGMesh.sln . Build the solution. The available compilation modes are: Release Debug RelWithDebInfo Note: Visual Studio has on pile per configuration mode. You must link consistently with the expected configuration mode.","title":"Compiling RINGMesh"},{"location":"try/tutorials/configure_compile_ringmesh/#compiling-the-documentation","text":"If Doxygen (version >= 1.8.2) is installed on your computer, a target doc-devkit is built during RINGMesh configuration. You can generate the documentation by: * Opening the solution which is in RINGMesh_root/build/ringmesh/RINGMesh.sln in Visual Studio * Building the doc-devkit Open the RINGMesh documentation with your favorite web browser at: RINGMesh_root\\build\\ringmesh\\devkit\\html\\index.html","title":"Compiling the documentation"},{"location":"try/tutorials/configure_compile_ringmesh/#mac-os-configure-and-compile","text":"","title":"Mac OS configure and compile"},{"location":"try/tutorials/configure_compile_ringmesh/#toolbox_2","text":"","title":"Toolbox"},{"location":"try/tutorials/configure_compile_ringmesh/#mandatory-tools_2","text":"CMake (version >= 3.1) gcc/g++ (version >= 4.8; C++11 support)","title":"Mandatory tools"},{"location":"try/tutorials/configure_compile_ringmesh/#optional-tools_2","text":"Doxygen (version >= 1.8.2; C++11 support). This is required if you want to build the documentation. There is no other dependency (everything you need is shipped with RINGMesh).","title":"Optional tools"},{"location":"try/tutorials/configure_compile_ringmesh/#configuring-ringmesh_2","text":"","title":"Configuring RINGMesh"},{"location":"try/tutorials/configure_compile_ringmesh/#using-clang-without-xcode","text":"As in Linux.","title":"Using clang (without Xcode)"},{"location":"try/tutorials/configure_compile_ringmesh/#using-xcode-ide","text":"As in Windows but with the Xcode generator (use \"-G Xcode\" if you use cmake in command lines).","title":"Using Xcode IDE"},{"location":"try/tutorials/configure_compile_ringmesh/#compiling-ringmesh_2","text":"You need to install the Mac OS \"Command Line Developer Tools\". Note: you need gcc/g++ version higher or equal to 4.2 to compile RINGMesh. In Mac OS, clang is used.","title":"Compiling RINGMesh"},{"location":"try/tutorials/configure_compile_ringmesh/#using-clang-without-xcode_1","text":"As in Linux except for the packages.","title":"Using clang (without Xcode)"},{"location":"try/tutorials/configure_compile_ringmesh/#using-xcode-ide_1","text":"You need to install Xcode IDE. Open the build/ringmesh/RINGMesh.xcodeproj with Xcode IDE, and then compile (as in Windows with VisualStudio). Or use these command lines: cd build/ringmesh xcodebuild -project RINGMesh.xcodeproj -alltargets -configuration Release To build in Debug, replace \"Release\" by \"Debug\" after \"-configuration\".","title":"Using Xcode IDE"},{"location":"try/tutorials/geomodel/geomodel-basics/","text":"Basic functionalities on GeoModel The most efficient way to build a GeoModel is to import its geometry and topology from a geomodeler. This tutorial presents a simple code to load manipulate and export GeoModel . A part of the code associated to this tutorial is available in the RINGMesh/doc/tutorials/src/geomodel-basic.cpp . It can be compiled by selecting the RINGMESH_WITH_TUTORIALS option during the RINGMesh configuration with CMake. GeoModel I/O GeoModel stores the geometry and the topology of a geological model. It can be imported from boundary representation or volumetric representation file. RINGMesh uses an extensible design to handle various file formats. The file extension is the key for selecting the suitable loader/saver. The Input/Output file formats currently supported by RINGMesh are listed here . A GeoModel can be loaded and saved as follow: //include for RINGMesh::GeoModel3D #include <ringmesh/geomodel/core/geomodel.h> //include for RINGMesh::geomodel_load & RINGMesh::geomodel_save #include <ringmesh/io/io.h> // GeoModel instantiation in 3D GeoModel3D geomodel ; // give the path to your working directory // give either the relative path from installation directory // or an absolute path. std::string path = \"path/to/inputs_output_files/\" // LOADING // filename to load // the file extension is the factory key. std::string input_file_name = \"your_input_model.key\"; // function to load a geomodel from input_file_name geomodel_load( geomodel, path + input_file_name ) ; // SAVING // path to the file to write // the file extension is the factory key. std::string output_file_name = \"your_output_model.key\"; geomodel_save(geomodel, path + output_file_name); When a GeoModel is loaded, its validity is automatically checked and resulting information are displayed. Try: Load the ModelA1.ml (a 3D model boundary representation from gocad available in the RINGMesh/data directory). Save it to the RINGMesh file format (.gm) ModelA1.gm . Open and look at the .gm file see description . Basic Usage Several functions can be called to study/manipulate/repair the GeoModel: //print the geomodel statistics in the command terminal #include <ringmesh/geomodel/core/geomodel_api.h> print_geomodel_mesh_stats( geomodel ) ; //investigate the validity of the geomodel #include <ringmesh/geomodel/tools/geomodel_validity.h> is_geomodel_valid( geomodel ) ; //translate geomodel along vertical axis #include <ringmesh/geomodel/tools/geomodel_tools.h> translate(geomodel, {0,0,100}) ; If RINGMesh is compiled with a meshing sofware: //build volumetric mesh in geomodel regions using TetGen [Si,2015] #include <geogram/basic/command_line.h> GEO::CmdLine::set_arg( \"algo:tet\", \"TetGen\" ); #include <ringmesh/geomodel/tools/geomodel_tools.h> tetrahedralize( geomodel ); This is not an exaustive list of functionalities. Please look at the doxygen documentation. Try: Load the ModelA1.ml (a 3D model boundary representation from gocad available in the RINGMesh/data directory). Print statistics on the imported geomodel. Mesh it with TetGen. Print statistics on the imported geomodel. Save it to the RINGMesh file format (.gm) ModelA1.gm . Open and analyse the .gm file see description . Manipulate GeoModelEntities This part is dedicated to GeoModel toplogical Entities see GeoModel . It shows how to access and manipulate geometrical and geological enties either by their global index or their adjacency relationships. GeoModelMeshEntities This example shows how to iterates on geometrical enties that define the boundary representation of the model. // Iterates on the Surfaces of a GeoModel and looks for boundaries and incident_entities for( const auto& surface : geomodel.surfaces() ) { // Iterates on boundary lines for( auto boundary_id : range( surface.nb_boundaries() ) { const auto& line = surface.boundary( boundary_id ); ... } // Iterates on incident regions (max. 2 incident regions) for( auto incident_id : range( surface.nb_incident_entities() ) { const auto& region = surface.incident_entity( incident_id ); ... } } GeoModelGeologicalEntities This example shows how to iterate on geological enties. It allows to access to geometrical entities that belong to the same geological feature. // Iterates on the Interfaces of a GeoModel and looks for children (being GeoModelMeshEntities) for( const auto& cur_interface : geomodel.geol_entities( Interface::type_name_static() ) ) { // Iterates on boundary lines for( auto child_id : range( cur_interface.nb_children() ) { const auto& surface = cur_interface.child( child_id ); ... } } // Iterates on the Surfaces of a GeoModel and looks for them parent of type Interface for( const auto& cur_surface : geomodel.surfaces() ) { if( cur_surface.has_parent( Interface::type_name_static() ) ) { const auto& parent = cur_surface.parent( Interface::type_name_static() ); ... } } Manipulate GeoModelMesh The GeoModelMesh is made of four data bases to provide a global and unique indexing of mesh component. This ease a global iteration through the GeoModel. //include for RINGMesh::GeoModelMesh #include <ringmesh/geomodel/core/geomodel_mesh.h> // Build GeoModelMesh GeoModelMesh gmm(geomodel); // Iterates on the RINGMesh::GeoModelMesh (gmm) vertices without redundancy for( auto v : range( gmm.vertices.nb() ) ) { const auto& point = gmm.vertices.vertex( v ); } // Iterates on the RINGMesh::GeoModelMesh (gmm) facets without redundancy for( auto surface_id : range( gmm.geomodel().nb_surfaces() ) ) { // Each surface can be stored twice if it is at the interface of two meshes // It is also possible to iterate only on triangles or quads for( auto polygon_id : range( gmm.polygons.nb_polygons( surface_id ) ) ) { auto polygon_id_in_the_mesh = gmm.polygons.polygon( surface_id, polygon_id ); std::cout << \"Nb vertices in the polygon: \" << gmm.polygons.nb_vertices( polygon_id_in_the_mesh ) << std::endl; } } // Iterates on the RINGMesh::GeoModelMesh (gmm) cells and their adjacent cells for( auto region_id : range( gmm.geomodel().nb_regions() ) ) { // It is also possible to iterate only on a specific cell type for( auto cell_id : range( gmm.cells.nb_cells( region_id ) ) ) { auto cell_in_gmm = gmm.cells.cell( region_id, cell_id ); for( auto facet_id : range( gmm.cells.nb_facets( cell_in_gmm ) ) ) { // Global cell adjacent index auto global_c_adj = gmm.cells.adjacent( { cell_in_gmm, facet_id } ); if( global_c_adj == NO_ID ) { // The cell is on the border ... } else { ... } } } }","title":"_Geomodel Basics"},{"location":"try/tutorials/geomodel/geomodel-basics/#basic-functionalities-on-geomodel","text":"The most efficient way to build a GeoModel is to import its geometry and topology from a geomodeler. This tutorial presents a simple code to load manipulate and export GeoModel . A part of the code associated to this tutorial is available in the RINGMesh/doc/tutorials/src/geomodel-basic.cpp . It can be compiled by selecting the RINGMESH_WITH_TUTORIALS option during the RINGMesh configuration with CMake.","title":"Basic functionalities on GeoModel"},{"location":"try/tutorials/geomodel/geomodel-basics/#geomodel-io","text":"GeoModel stores the geometry and the topology of a geological model. It can be imported from boundary representation or volumetric representation file. RINGMesh uses an extensible design to handle various file formats. The file extension is the key for selecting the suitable loader/saver. The Input/Output file formats currently supported by RINGMesh are listed here . A GeoModel can be loaded and saved as follow: //include for RINGMesh::GeoModel3D #include <ringmesh/geomodel/core/geomodel.h> //include for RINGMesh::geomodel_load & RINGMesh::geomodel_save #include <ringmesh/io/io.h> // GeoModel instantiation in 3D GeoModel3D geomodel ; // give the path to your working directory // give either the relative path from installation directory // or an absolute path. std::string path = \"path/to/inputs_output_files/\" // LOADING // filename to load // the file extension is the factory key. std::string input_file_name = \"your_input_model.key\"; // function to load a geomodel from input_file_name geomodel_load( geomodel, path + input_file_name ) ; // SAVING // path to the file to write // the file extension is the factory key. std::string output_file_name = \"your_output_model.key\"; geomodel_save(geomodel, path + output_file_name); When a GeoModel is loaded, its validity is automatically checked and resulting information are displayed.","title":"GeoModel I/O"},{"location":"try/tutorials/geomodel/geomodel-basics/#try","text":"Load the ModelA1.ml (a 3D model boundary representation from gocad available in the RINGMesh/data directory). Save it to the RINGMesh file format (.gm) ModelA1.gm . Open and look at the .gm file see description .","title":"Try:"},{"location":"try/tutorials/geomodel/geomodel-basics/#basic-usage","text":"Several functions can be called to study/manipulate/repair the GeoModel: //print the geomodel statistics in the command terminal #include <ringmesh/geomodel/core/geomodel_api.h> print_geomodel_mesh_stats( geomodel ) ; //investigate the validity of the geomodel #include <ringmesh/geomodel/tools/geomodel_validity.h> is_geomodel_valid( geomodel ) ; //translate geomodel along vertical axis #include <ringmesh/geomodel/tools/geomodel_tools.h> translate(geomodel, {0,0,100}) ; If RINGMesh is compiled with a meshing sofware: //build volumetric mesh in geomodel regions using TetGen [Si,2015] #include <geogram/basic/command_line.h> GEO::CmdLine::set_arg( \"algo:tet\", \"TetGen\" ); #include <ringmesh/geomodel/tools/geomodel_tools.h> tetrahedralize( geomodel ); This is not an exaustive list of functionalities. Please look at the doxygen documentation. Try: Load the ModelA1.ml (a 3D model boundary representation from gocad available in the RINGMesh/data directory). Print statistics on the imported geomodel. Mesh it with TetGen. Print statistics on the imported geomodel. Save it to the RINGMesh file format (.gm) ModelA1.gm . Open and analyse the .gm file see description .","title":"Basic Usage"},{"location":"try/tutorials/geomodel/geomodel-basics/#manipulate-geomodelentities","text":"This part is dedicated to GeoModel toplogical Entities see GeoModel . It shows how to access and manipulate geometrical and geological enties either by their global index or their adjacency relationships.","title":"Manipulate GeoModelEntities"},{"location":"try/tutorials/geomodel/geomodel-basics/#geomodelmeshentities","text":"This example shows how to iterates on geometrical enties that define the boundary representation of the model. // Iterates on the Surfaces of a GeoModel and looks for boundaries and incident_entities for( const auto& surface : geomodel.surfaces() ) { // Iterates on boundary lines for( auto boundary_id : range( surface.nb_boundaries() ) { const auto& line = surface.boundary( boundary_id ); ... } // Iterates on incident regions (max. 2 incident regions) for( auto incident_id : range( surface.nb_incident_entities() ) { const auto& region = surface.incident_entity( incident_id ); ... } }","title":"GeoModelMeshEntities"},{"location":"try/tutorials/geomodel/geomodel-basics/#geomodelgeologicalentities","text":"This example shows how to iterate on geological enties. It allows to access to geometrical entities that belong to the same geological feature. // Iterates on the Interfaces of a GeoModel and looks for children (being GeoModelMeshEntities) for( const auto& cur_interface : geomodel.geol_entities( Interface::type_name_static() ) ) { // Iterates on boundary lines for( auto child_id : range( cur_interface.nb_children() ) { const auto& surface = cur_interface.child( child_id ); ... } } // Iterates on the Surfaces of a GeoModel and looks for them parent of type Interface for( const auto& cur_surface : geomodel.surfaces() ) { if( cur_surface.has_parent( Interface::type_name_static() ) ) { const auto& parent = cur_surface.parent( Interface::type_name_static() ); ... } }","title":"GeoModelGeologicalEntities"},{"location":"try/tutorials/geomodel/geomodel-basics/#manipulate-geomodelmesh","text":"The GeoModelMesh is made of four data bases to provide a global and unique indexing of mesh component. This ease a global iteration through the GeoModel. //include for RINGMesh::GeoModelMesh #include <ringmesh/geomodel/core/geomodel_mesh.h> // Build GeoModelMesh GeoModelMesh gmm(geomodel); // Iterates on the RINGMesh::GeoModelMesh (gmm) vertices without redundancy for( auto v : range( gmm.vertices.nb() ) ) { const auto& point = gmm.vertices.vertex( v ); } // Iterates on the RINGMesh::GeoModelMesh (gmm) facets without redundancy for( auto surface_id : range( gmm.geomodel().nb_surfaces() ) ) { // Each surface can be stored twice if it is at the interface of two meshes // It is also possible to iterate only on triangles or quads for( auto polygon_id : range( gmm.polygons.nb_polygons( surface_id ) ) ) { auto polygon_id_in_the_mesh = gmm.polygons.polygon( surface_id, polygon_id ); std::cout << \"Nb vertices in the polygon: \" << gmm.polygons.nb_vertices( polygon_id_in_the_mesh ) << std::endl; } } // Iterates on the RINGMesh::GeoModelMesh (gmm) cells and their adjacent cells for( auto region_id : range( gmm.geomodel().nb_regions() ) ) { // It is also possible to iterate only on a specific cell type for( auto cell_id : range( gmm.cells.nb_cells( region_id ) ) ) { auto cell_in_gmm = gmm.cells.cell( region_id, cell_id ); for( auto facet_id : range( gmm.cells.nb_facets( cell_in_gmm ) ) ) { // Global cell adjacent index auto global_c_adj = gmm.cells.adjacent( { cell_in_gmm, facet_id } ); if( global_c_adj == NO_ID ) { // The cell is on the border ... } else { ... } } } }","title":"Manipulate GeoModelMesh"}]}